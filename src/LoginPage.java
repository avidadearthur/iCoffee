import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.json.JSONArray;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;


public class LoginPage extends JFrame {
    private JPanel myPanel;
    private JButton Login;
    private JPasswordField passwordField1;
    private JButton backButton;
    private JTextField myTextLogin;
    private JLabel myPassword;
    private JLabel myLogin;

    public LoginPage(String title) {
        super(title);
        setContentPane(myPanel);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
        this.setSize(500, 800);
        this.setLocationRelativeTo(null);
    }

    public JButton getLogin() {
        return Login;
    }

    public JButton getBack() {
        return backButton;
    }

    public JTextField getMyTextEmail() {
        return myTextLogin;
    }

    public JPasswordField getPasswordField1() {
        return passwordField1;
    }

    public boolean hasAccount() {
        String inputUsername = this.getMyTextEmail().getText();
        String inputPassword = String.valueOf(this.getPasswordField1().getPassword());

        Connection connection = new Connection();
        String password = connection.parseJSON(connection.makeGETRequest("https://studev.groept.be/api/a21ib2b02/findPassword/" + inputUsername), "Password");

        return password.equals(inputPassword);
    }

    public JSONArray handleForm() {
        JSONArray jsonResponse;
        Connection connection = new Connection();

        if (hasAccount()) {
            String response = connection.makeGETRequest("https://studev.groept.be/api/a21ib2b02/getAlarms/" + this.getMyTextEmail().getText());
            jsonResponse = new JSONArray(response);
            return jsonResponse;
        } else {
            System.out.println("Wrong email or password");
        }
        return null;
    }

    public String[]  getCredentials() {
        String[] credentials = new String[2];
        String inputUsername = this.getMyTextEmail().getText();
        String inputPassword = String.valueOf(this.getPasswordField1().getPassword());

        if (hasAccount()) {
            credentials[0] = inputUsername;
            credentials[1] = inputPassword;
        }
        return credentials;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myPanel = new JPanel();
        myPanel.setLayout(new GridLayoutManager(6, 10, new Insets(50, 50, 50, 50), -1, -1));
        Login = new JButton();
        Login.setText("Login");
        myPanel.add(Login, new GridConstraints(5, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myPassword = new JLabel();
        myPassword.setText("Password");
        myPanel.add(myPassword, new GridConstraints(3, 5, 1, 2, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myTextLogin = new JTextField();
        myPanel.add(myTextLogin, new GridConstraints(2, 5, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("BankGothic Lt BT", -1, 30, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("ICoffee");
        myPanel.add(label1, new GridConstraints(0, 5, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myLogin = new JLabel();
        myLogin.setText("login");
        myPanel.add(myLogin, new GridConstraints(1, 5, 1, 2, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField1 = new JPasswordField();
        myPanel.add(passwordField1, new GridConstraints(4, 5, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        myPanel.add(backButton, new GridConstraints(5, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myLogin.setLabelFor(myTextLogin);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myPanel;
    }


}
